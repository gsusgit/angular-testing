{
  "Jasmine It Should": {
    "prefix": "ab-jas-is",
    "body": [
      "describe('$1', () => {",
      "  let sut;",
      "  beforeEach(() => {",
      "    // Arrange",
      "    sut = new SubjectUnderTest();",
      "  });",
      "  it('should $2', () => {",
      "    // Act",
      "    const actual = sut.callMethod();",
      "    // Assert",
      "    const expected = something;",
      "    expect(actual).toEqual(expected);",
      "  });",
      "});"
    ],
    "description": "Esqueleto simple IS con Jasmine"
  },
  "Jasmine Given When Then Blank": {
    "prefix": "ab-jas-gwtb",
    "body": [
      "describe('GIVEN: $2', () => {",
      "  beforeEach(() => {",
      "   // Arrange",
      "  });",
      "  describe('WHEN $3', () => {",
      "    beforeEach(() => {",
      "     // Act",
      "    });",
      "    it('THEN should $4', () => {",
      "      // Assert",
      "    });",
      "  });",
      "});"
    ],
    "description": "Esqueleto en blanco GWT para usar con Jasmine"
  },
  "Jasmine Given When Then": {
    "prefix": "ab-jas-gwt",
    "body": [
      "describe('$1', () => {",
      "  describe('GIVEN: $2', () => {",
      "    let sut = null;",
      "    let actual = null;",
      "    beforeEach(() => {",
      "     // Arrange",
      "     sut = new SubjectUnderTest();",
      "    });",
      "    describe('WHEN $3', () => {",
      "      beforeEach(() => {",
      "       // Act",
      "       actual = sut.callMethod();",
      "      });",
      "      it('THEN should $4', () => {",
      "        // Assert",
      "        const expected= null;",
      "        expect(actual).toEqual(expected);",
      "      });",
      "    });",
      "  });",
      "});"
    ],
    "description": "Esqueleto completo GWT para usar con Jasmine"
  },
  "Jasmine Given When Then HTML": {
    "prefix": "ab-jas-gwt-h",
    "body": [
      "describe('GIVEN the ${1:serviceName}Service isolated from remote server', () => {",
      "  let service: $1Service;",
      "  let controller: HttpTestingController;",
      "  let testRequest: TestRequest;",
      "  beforeEach(() => {",
      "    // Arrange",
      "    TestBed.configureTestingModule({",
      "      imports: [HttpClientTestingModule],",
      "      providers: [$1Service],",
      "    });",
      "    service = TestBed.inject($1Service);",
      "    controller = TestBed.inject(HttpTestingController);",
      "  });",
      "  describe('WHEN ', () => {",
      "    const input = null;",
      "    let actual: HttpErrorResponse | unknown;",
      "    beforeEach(() => {",
      "      // Act",
      "      service.callMethod$(input).subscribe({",
      "        next: data => (actual = data),",
      "        error: err => (actual = err),",
      "      });",
      "      const expectedUrl = 'theUrlExpectedToHaveBeenCalled';",
      "      testRequest = controller.expectOne(expectedUrl);",
      "      const stubbedResponse = \"Your fixed response\";",
      "      testRequest.flush(stubbedResponse);",
      "    });",
      "    it('THEN should ', () => {",
      "      // Assert",
      "      const expected = `calledUrl`;",
      "      testRequest = controller.expectOne(expected);",
      "    });",
      "  });",
      "  afterEach(() => {",
      "    controller.verify();",
      "  });",
      "});"
    ],
    "description": "Esqueleto GWT con llamadas HTTP para usar con Jasmine"
  },
  "Jasmine Angular Component View": {
    "prefix": "ab-jas-ngcv",
    "body": [
      "import { DebugElement } from '@angular/core';",
      "import { ComponentFixture, TestBed } from '@angular/core/testing';",
      "import { $1Component } from './${1/(.*)/${1:/downcase}/}.component';",
      "",
      "describe('GIVEN the $1Component', () => {",
      "  let component: $1Component;",
      "  let fixture: ComponentFixture<$1Component>;",
      "  let debugEl: DebugElement;",
      "  let nativeEl: HTMLElement;",
      "",
      "  beforeEach(async () => {",
      "    // Arrange",
      "    await TestBed.configureTestingModule({",
      "      declarations: [$1Component],",
      "    }).compileComponents();",
      "    fixture = TestBed.createComponent($1Component);",
      "    component = fixture.componentInstance;",
      "    debugEl = fixture.debugElement;",
      "    nativeEl = fixture.nativeElement;",
      "  });",
      "  describe('WHEN $2', () => {",
      "    beforeEach(() => {",
      "      // Act",
      "     fixture.detectChanges();",
      "    });",
      "",
      "    it('THEN $3', () => {",
      "      // Act",
      "      const actual = '';$0",
      "      // Assert",
      "      const expected = '';",
      "      expect(actual).toEqual(expected);",
      "    });",
      "  });",
      "});"
    ],
    "description": "GWT para compoentes Angular con Jasmine"
  }
}
